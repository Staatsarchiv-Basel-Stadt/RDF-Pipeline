@base <urn:pipeline:stabs/>.
@prefix p: <https://pipeline.described.at/>.
@prefix code: <https://code.described.at/>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.

<defaultVars>
  p:variable [ a p:Variable;
    p:name "SINK_ENDPOINT_URL";
    p:value "http://localhost:5820/scope"
  ], [ a p:Variable;
    p:name "SOURCE_ENDPOINT_URL";
    p:value "http://localhost:5820/scope"
  ], [ a p:Variable;
    p:name "SOURCE_ENDPOINT_USER";
    p:value "admin"
  ], [ a p:Variable;
    p:name "SOURCE_ENDPOINT_PASSWORD";
    p:value "admin"
  ], [ a p:Variable;
    p:name "SINK_ENDPOINT_USER";
    p:value "admin"
  ], [ a p:Variable;
    p:name "SINK_ENDPOINT_PASSWORD";
    p:value "admin"
  ], [ a p:Variable;
    p:name "inputFilePattern";
    p:value "metadata/*.ttl"
  ], [ a p:Variable;
    p:name "sourceGraph";
    p:value "https://ld.staatsarchiv.bs.ch/graph/source"
  ], [ a p:Variable;
    p:name "sinkGraph";
    p:value "https://ld.staatsarchiv.bs.ch/graph/ais-metadata"
  ].

<main> a p:Pipeline, p:Readable;
  p:variables <defaultVars>;
  p:steps [
    p:stepList (
      <mergeInputs>
      <serialize>
    )
  ].

<mainStore> a p:Pipeline, p:Readable;
  p:variables <defaultVars>;
  p:steps [
    p:stepList (
      <mergeInputs>
      <serialize>
      <graph-store-put-curl>
    )
  ].

<mainFile> a p:Pipeline;
  p:variables <defaultVars>;
  p:steps [
    p:stepList (
      <mergeInputs>
      <serialize>
      <save>
    )
  ].

<static> a p:Pipeline, p:ReadableObjectMode;
  p:variables <defaultVars>;
  p:steps [
    p:stepList (
      <listTurtleFiles>
      <forEachTurtleFile>
      <timestamp>
    )
  ].

<getStore> a p:Pipeline, p:ReadableObjectMode;
  p:variables <defaultVars>;
  p:steps [
    p:stepList (
      <graph-store-get>
      <forceTriple>
    )
  ].

# pipeline unused (would stream metadata to endpoint)
<store> a p:Pipeline;
  p:variables <defaultVars>;
  p:steps [
    p:stepList (
      <listTurtleFiles>
      <forEachTurtleFile>
      <graph-store-put>
    )
  ].

<listTurtleFiles> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-base#glob>
  ];
  code:arguments [
    code:name "pattern";
    code:value "inputFilePattern"^^p:VariableName
  ].

<forEachTurtleFile> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-core#forEach>
  ];
  code:arguments (<readTurtle> "filename").

<readTurtle> a p:Pipeline, p:ReadableObjectMode;
  p:steps [
    p:stepList (
      <readTurtle>
      <parseTurtle>
    )
  ].

<readTurtle> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:fs#createReadStream>
  ];
  code:arguments ("filename"^^p:VariableName).

<parseTurtle> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-formats/n3.js#parse>
  ];
  code:arguments (<parseMetadata>).

<serialize> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-formats/ntriples.js#serialize>
  ].

<mergeInputs> a p:Step ;
  code:implementedBy [ a code:EcmaScript ;
  code:link <node:barnard59-base#concat.object> ] ;
  code:arguments     ( 
    <static>
    <getStore>
  ) .

<setSinkGraph> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-rdf/setGraph.js>
  ];
  code:arguments ("${sinkGraph}"^^code:EcmaScriptTemplateLiteral).

<setSourceGraph> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-rdf/setGraph.js>
  ];
  code:arguments ("${sourceGraph}"^^code:EcmaScriptTemplateLiteral).

# unused and obsolete step, would stream data to endpoint, now done through curl
<graph-store-put> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-graph-store#put>
  ];
  code:arguments [
    code:name "endpoint";
    code:value "SINK_ENDPOINT_URL"^^p:VariableName
  ], [
    code:name "user";
    code:value "SINK_ENDPOINT_USER"^^p:VariableName
  ], [
    code:name "password";
    code:value "SINK_ENDPOINT_PASSWORD"^^p:VariableName
  ].

<graph-store-get> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-graph-store#get>
  ];
  code:arguments [
    code:name "endpoint";
    code:value "SOURCE_ENDPOINT_URL"^^p:VariableName
  ], [
    code:name "user";
    code:value "SOURCE_ENDPOINT_USER"^^p:VariableName
  ], [
    code:name "password";
    code:value "SOURCE_ENDPOINT_PASSWORD"^^p:VariableName
  ], [
    code:name "graph";
    code:value "sourceGraph"^^p:VariableName
  ] .

<save> a p:Step;
  code:implementedBy
    [
      code:link <node:fs#createWriteStream>;
      a code:EcmaScript
    ];
  code:arguments ("scope.nt"^^code:EcmaScriptTemplateLiteral).

<fixDecimal> a p:Step ;
  code:implementedBy [ a code:EcmaScript ;
    code:link <node:barnard59-base#map>  
  ] ;
  code:arguments ( [ a code:EcmaScript ;
                    code:link <file:../lib/fix#fixDecimal>
                    ] )
  .

<timestamp> a p:Step;
	code:implementedBy [ a code:EcmaScript;
        code:link <node:barnard59-base#map>
    ];
    code:arguments ("""quad => {
        const rdf = require('rdf-ext')
        const { DateTime } = require('luxon');
        if (rdf.namedNode('http://purl.org/dc/terms/issued').equals(quad.predicate)) {
            const object = rdf.literal(DateTime.now().toISO(), rdf.namedNode('http://www.w3.org/2001/XMLSchema#dateTime'))
			      return rdf.quad(quad.subject, quad.predicate, object)
        }
        return quad
    }"""^^code:EcmaScript).

<forceTriple> a p:Step;
	code:implementedBy [ a code:EcmaScript;
        code:link <node:barnard59-base#map>
    ];
    code:arguments ("""quad => {
        const rdf = require('rdf-ext')
        return rdf.quad(quad.subject, quad.predicate, quad.object, rdf.defaultGraph)
    }"""^^code:EcmaScript).

# unused step, replaced by shell script using curl
<graph-store-put-curl> a p:Step;
  code:implementedBy [
    code:link <node:barnard59-shell>;
    a code:EcmaScript
  ];
#  code:arguments ("curl" "-s" "-n" "--fail-with-body" "-X" "PUT" "-H" "Content-Type:application/n-triples" "-T" "-" "-G" "SINK_ENDPOINT_URL"^^p:VariableName "--data-urlencode" "graph=${sinkGraph}"^^code:EcmaScriptTemplateLiteral) .
  code:arguments ("curl" "-s" "-n" "--fail" "-X" "PUT" "-H" "Content-Type:application/n-triples" "-T" "-" "-G" "SINK_ENDPOINT_URL"^^p:VariableName "--data-urlencode" "graph=${sinkGraph}"^^code:EcmaScriptTemplateLiteral) .
